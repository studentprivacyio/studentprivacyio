---
import RadioOption from '@components/RadioOption.astro';
import Button from '@components/Button.astro';
---

<form class="mx-auto space-y-8 divide-y divide-gray-200 bg-white p-6">
  <div class="space-y-8">
    <div>
      <h3 class="text-lg font-medium leading-6 text-gray-900">Request Type</h3>
      <p class="mt-1 text-sm text-gray-500">Select the type of request you'd like to make.</p>
      <div class="mt-4 space-y-1 bg-gray-50 p-2">
        <RadioOption
          id="ppra"
          name="request_type"
          value="ppra"
          label="Opt out via PPRA"
        />
        <RadioOption
          id="ferpa"
          name="request_type"
          value="ferpa"
          label="Request records via FERPA"
        />
        <RadioOption
          id="coppa"
          name="request_type"
          value="coppa"
          label="Opt out via COPPA (Under 13 only)"
        />
        <RadioOption
          id="ecpa"
          name="request_type"
          value="ecpa"
          label="Opt out via ECPA (Student must send)"
        />
      </div>
    </div>

    <div>
      <div class="flex justify-between items-center mb-4">
        <h3 class="text-lg font-medium leading-6 text-gray-900">Software Information</h3>
        <button
          type="button"
          id="addSoftware"
          class="text-gray-600 hover:text-gray-900 bg-gray-300 px-4 py-1 text-sm md:text-base"
        >
          Add Software
        </button>
      </div>
      
      <div id="softwareList" class="space-y-6">
        <div class="software-entry grid grid-cols-1 md:grid-cols-2 gap-6 p-4 bg-gray-50 rounded-md relative">
          <button
            type="button"
            class="remove-software absolute top-2 right-2 text-gray-400 hover:text-gray-600"
            style="display: none;"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
            </svg>
          </button>
          <div>
            <label for="software_name_0" class="block text-sm font-medium text-gray-700">Software Name</label>
            <div class="mt-1">
              <input
                type="text"
                name="software_name"
                id="software_name_0"
                class="block w-full p-2.5 bg-white border-gray-300 border outline-0 focus:border-gray-500 focus:ring-gray-500 sm:text-sm"
                required
              />
            </div>
          </div>

          <div>
            <label for="software_company_0" class="block text-sm font-medium text-gray-700">Software Company (optional)</label>
            <div class="mt-1">
              <input
                type="text"
                name="software_company"
                id="software_company_0"
                class="block w-full p-2.5 bg-white border-gray-300 border outline-0 focus:border-gray-500 focus:ring-gray-500 sm:text-sm"
              />
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
      <div>
        <label for="email" class="block text-sm font-medium text-gray-700">Send to Email Address</label>
        <div class="mt-1">
          <input
            type="email"
            name="email"
            id="email"
            class="block w-full p-2.5 bg-gray-50 border-gray-300 border outline-0 focus:border-gray-500 focus:ring-gray-500 sm:text-sm"
            required
          />
        </div>
      </div>

      <div>
        <label for="student_name" class="block text-sm font-medium text-gray-700">Student Name</label>
        <div class="mt-1">
          <input
            type="text"
            name="student_name"
            id="student_name"
            class="block w-full p-2.5 bg-gray-50 border-gray-300 border outline-0 focus:border-gray-500 focus:ring-gray-500 sm:text-sm"
            required
          />
        </div>
      </div>

      <div class="md:col-span-2">
        <label for="parent_name" class="block text-sm font-medium text-gray-700">Parent/Guardian Name</label>
        <div class="mt-1">
          <input
            type="text"
            name="parent_name"
            id="parent_name"
            class="block w-full p-2.5 bg-gray-50 border-gray-300 border outline-0 focus:border-gray-500 focus:ring-gray-500 sm:text-sm"
            required
          />
        </div>
      </div>
    </div>

    <div class="flex items-center space-x-3">
      <input
        type="checkbox"
        id="include_watermark"
        name="include_watermark"
        class="h-4 w-4 border-gray-300 text-gray-600 focus:ring-gray-500"
      />
      <label for="include_watermark" class="text-sm text-gray-600">
        Include "Generated using studentprivacy.io" in the email
      </label>
    </div>
  </div>

  <div class="pt-6 space-y-6">
    <div>
      <h3 class="text-lg font-medium leading-6 text-gray-900">Email Preview</h3>
      <div id="emailPreview" class="mt-4 p-4 bg-gray-50 border border-gray-200 font-mono text-sm whitespace-pre-wrap min-h-[200px]">Fill out the form to preview your email</div>
    </div>

    <div class="flex justify-end">
      <button id="sendEmail" type="submit" class="text-gray-600 hover:text-gray-900 bg-gray-300 px-4 py-1">
        Send email
      </button>
    </div>
  </div>
</form>

<script>
    interface SoftwareEntry {
        name: string;
        company?: string;
    }

    function setupForm() {
        let debounceTimeout: ReturnType<typeof setTimeout>;
        const form = document.querySelector('form');
        const preview = document.getElementById('emailPreview');
        const addSoftwareBtn = document.getElementById('addSoftware');
        const softwareList = document.getElementById('softwareList');
        let softwareCount = 1;

        function createSoftwareEntry(index: number) {
            const entry = document.createElement('div');
            entry.className = 'software-entry grid grid-cols-1 md:grid-cols-2 gap-6 p-4 bg-gray-50 rounded-md relative';
            entry.innerHTML = `
                <button
                    type="button"
                    class="remove-software absolute top-2 right-2 text-gray-400 hover:text-gray-600"
                    ${index === 0 ? 'style="display: none;"' : ''}
                >
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                    </svg>
                </button>
                <div>
                    <label for="software_name_${index}" class="block text-sm font-medium text-gray-700">Software Name</label>
                    <div class="mt-1">
                        <input
                            type="text"
                            name="software_name"
                            id="software_name_${index}"
                            class="block w-full p-2.5 bg-white border-gray-300 border outline-0 focus:border-gray-500 focus:ring-gray-500 sm:text-sm"
                            required
                        />
                    </div>
                </div>
                <div>
                    <label for="software_company_${index}" class="block text-sm font-medium text-gray-700">Software Company (optional)</label>
                    <div class="mt-1">
                        <input
                            type="text"
                            name="software_company"
                            id="software_company_${index}"
                            class="block w-full p-2.5 bg-white border-gray-300 border outline-0 focus:border-gray-500 focus:ring-gray-500 sm:text-sm"
                        />
                    </div>
                </div>
            `;
            return entry;
        }

        function getSoftwareEntries(): SoftwareEntry[] {
            const entries: SoftwareEntry[] = [];
            const softwareEntries = document.querySelectorAll('.software-entry');
            
            softwareEntries.forEach(entry => {
                const nameInput = entry.querySelector('[name="software_name"]') as HTMLInputElement;
                const companyInput = entry.querySelector('[name="software_company"]') as HTMLInputElement;
                
                if (nameInput?.value) {
                    entries.push({
                        name: nameInput.value,
                        ...(companyInput?.value ? { company: companyInput.value } : {})
                    });
                }
            });
            
            return entries;
        }

        async function updatePreview() {
            const formData = new FormData(form as HTMLFormElement);
            const requestType = formData.get('request_type');
            const email = formData.get('email');
            const studentName = formData.get('student_name');
            const parentName = formData.get('parent_name');
            const includeWatermark = formData.get('include_watermark') === 'on';
            const softwareEntries = getSoftwareEntries();

            if (!requestType || !studentName || !parentName || softwareEntries.length === 0) {
                if (preview) {
                    preview.textContent = 'Fill out the form to preview your email';
                }
                return;
            }

            try {
                const module = await import(`../emails/${requestType}.mdx`);
                let emailContent = module.generateEmail({ 
                    studentName, 
                    parentName,
                    softwareList: softwareEntries
                });
                
                if (includeWatermark) {
                    emailContent += '\n\nGenerated using studentprivacy.io';
                }
                
                if (preview) {
                    preview.textContent = emailContent;
                }
            } catch (error) {
                console.error('Error generating preview:', error);
            }
        }

        // Add software entry
        addSoftwareBtn?.addEventListener('click', () => {
            const newEntry = createSoftwareEntry(softwareCount++);
            softwareList?.appendChild(newEntry);
            
            // Add remove button handler
            const removeBtn = newEntry.querySelector('.remove-software');
            removeBtn?.addEventListener('click', () => {
                newEntry.remove();
                updatePreview();
            });
        });

        // Update preview on form changes
        form?.addEventListener('input', () => {
            clearTimeout(debounceTimeout);
            debounceTimeout = setTimeout(updatePreview, 300);
        });

        form?.addEventListener('change', () => {
            clearTimeout(debounceTimeout);
            debounceTimeout = setTimeout(updatePreview, 300);
        });
    }

    // Initialize form on both initial load and subsequent navigations
    document.addEventListener('astro:page-load', () => {
        setupForm();
    });
</script> 